// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.0
// source: proto/b_service/service.proto

package b_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GoodbyeClient is the client API for Goodbye service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoodbyeClient interface {
	// Sends a goodbye.go
	SayGoodbye(ctx context.Context, in *GoodbyeRequest, opts ...grpc.CallOption) (*GoodbyeReply, error)
}

type goodbyeClient struct {
	cc grpc.ClientConnInterface
}

func NewGoodbyeClient(cc grpc.ClientConnInterface) GoodbyeClient {
	return &goodbyeClient{cc}
}

func (c *goodbyeClient) SayGoodbye(ctx context.Context, in *GoodbyeRequest, opts ...grpc.CallOption) (*GoodbyeReply, error) {
	out := new(GoodbyeReply)
	err := c.cc.Invoke(ctx, "/b_service.Goodbye/SayGoodbye", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoodbyeServer is the server API for Goodbye service.
// All implementations must embed UnimplementedGoodbyeServer
// for forward compatibility
type GoodbyeServer interface {
	// Sends a goodbye.go
	SayGoodbye(context.Context, *GoodbyeRequest) (*GoodbyeReply, error)
	mustEmbedUnimplementedGoodbyeServer()
}

// UnimplementedGoodbyeServer must be embedded to have forward compatible implementations.
type UnimplementedGoodbyeServer struct {
}

func (UnimplementedGoodbyeServer) SayGoodbye(context.Context, *GoodbyeRequest) (*GoodbyeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayGoodbye not implemented")
}
func (UnimplementedGoodbyeServer) mustEmbedUnimplementedGoodbyeServer() {}

// UnsafeGoodbyeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoodbyeServer will
// result in compilation errors.
type UnsafeGoodbyeServer interface {
	mustEmbedUnimplementedGoodbyeServer()
}

func RegisterGoodbyeServer(s grpc.ServiceRegistrar, srv GoodbyeServer) {
	s.RegisterService(&Goodbye_ServiceDesc, srv)
}

func _Goodbye_SayGoodbye_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodbyeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodbyeServer).SayGoodbye(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/b_service.Goodbye/SayGoodbye",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodbyeServer).SayGoodbye(ctx, req.(*GoodbyeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Goodbye_ServiceDesc is the grpc.ServiceDesc for Goodbye service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Goodbye_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "b_service.Goodbye",
	HandlerType: (*GoodbyeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayGoodbye",
			Handler:    _Goodbye_SayGoodbye_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/b_service/service.proto",
}
